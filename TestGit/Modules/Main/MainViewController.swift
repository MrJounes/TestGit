//
//  MainViewController.swift
//  TestGit
//
//  Created by Игорь Дикань on 22.03.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func display(viewModel: Main.Model.ViewModel.ViewModelType)
}

final class MainViewController: UIViewController {
    
    // MARK: - IBOutlets
    
    // MARK: - External vars
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: - Internal vars

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        MainConfigurator.shared.configure(self)
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        MainConfigurator.shared.configure(self)
    }
  
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    // MARK: - IBActions
}

// MARK: - Display logic
extension MainViewController: MainDisplayLogic {
    
    func display(viewModel: Main.Model.ViewModel.ViewModelType) {
        switch viewModel {
        case .some:
            print("MainViewController")
        }
    }
}

// MARK: - Private methods
private extension MainViewController {
    
    func setupView() {
        print("----------")
        interactor?.make(request: .some)
    }
}
